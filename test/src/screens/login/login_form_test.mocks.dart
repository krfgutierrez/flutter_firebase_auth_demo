// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_firebase_auth_demo/test/src/screens/login/login_form_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:flutter_firebase_auth_demo/src/domain/auth_repository.dart'
    as _i2;
import 'package:flutter_firebase_auth_demo/src/domain/login_use_case.dart'
    as _i5;
import 'package:flutter_firebase_auth_demo/src/screens/login/bloc/login_screen_bloc.dart'
    as _i3;
import 'package:flutter_firebase_auth_demo/src/screens/login/login_form.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserSession_0 extends _i1.SmartFake implements _i2.UserSession {
  _FakeUserSession_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginScreenState_1 extends _i1.SmartFake
    implements _i3.LoginScreenState {
  _FakeLoginScreenState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ILoginFormContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockILoginFormContract extends _i1.Mock
    implements _i4.ILoginFormContract {
  @override
  void onAuthenticated(_i2.UserSession? session) => super.noSuchMethod(
        Invocation.method(
          #onAuthenticated,
          [session],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i5.LoginUseCase {
  @override
  _i6.Future<_i2.UserSession> execute(_i2.AccountCredential? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [params],
        ),
        returnValue: _i6.Future<_i2.UserSession>.value(_FakeUserSession_0(
          this,
          Invocation.method(
            #execute,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.UserSession>.value(_FakeUserSession_0(
          this,
          Invocation.method(
            #execute,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.UserSession>);
}

/// A class which mocks [LoginScreenBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginScreenBloc extends _i1.Mock implements _i3.LoginScreenBloc {
  @override
  _i3.LoginScreenState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoginScreenState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLoginScreenState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.LoginScreenState);

  @override
  _i6.Stream<_i3.LoginScreenState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.LoginScreenState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i3.LoginScreenState>.empty(),
      ) as _i6.Stream<_i3.LoginScreenState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i3.LoginScreenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.LoginScreenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.LoginScreenState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.LoginScreenEvent>(
    _i7.EventHandler<E, _i3.LoginScreenState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i7.Transition<_i3.LoginScreenEvent, _i3.LoginScreenState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i3.LoginScreenState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ILoginFormValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockILoginFormValidator extends _i1.Mock
    implements _i4.ILoginFormValidator {}
